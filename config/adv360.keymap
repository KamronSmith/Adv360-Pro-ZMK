/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */
/* THIS FILE WAS GENERATED!
 *
 * This file was generated automatically. You may or may not want to
 * edit it directly.
 */

#include <dt-bindings/zmk/mouse.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

&sk { quick-release; };

/ {
    behaviors {
        #include "macros.dtsi"
    #include "version.dtsi"

        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <175>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        Hml: Hml {
            compatible = "zmk,behavior-hold-tap";
            label = "HML";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <200>;
            hold-trigger-key-positions = <7 8 9 10 11 12 13 21 22 23 24 25 26 27 38 39 40 41 42 43 44 45 54 55 56 57 58 59 69 70 71 72 73 74 75 37 38 53 68 69>;
            hold-trigger-on-release;
        };

        Hmr: Hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <200>;
            flavor = "balanced";
            hold-trigger-key-positions = <0 1 2 3 4 5 6 14 15 16 17 18 19 20 28 29 30 31 32 33 34 35 36 46 47 48 49 50 51 52 60 61 62 63 64 65 66 67>;
            hold-trigger-on-release;
        };

        Bspc: Bspc {
            compatible = "zmk,behavior-hold-tap";
            label = "BSPC";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick-tap-ms = <175>;
            flavor = "balanced";
        };

        Spc: Spc {
            compatible = "zmk,behavior-hold-tap";
            label = "SPC";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick-tap-ms = <125>;
            flavor = "balanced";
            require-prior-idle-ms = <200>;
        };

        Caps: Caps {
            compatible = "zmk,behavior-mod-morph";
            label = "CAPS";
            bindings = <&sk LSHFT>, <&caps_word>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_RCTL|MOD_LSFT|MOD_RSFT)>;
        };

        num_one: num_one {
            compatible = "zmk,behavior-mod-morph";
            label = "NUM_ONE";
            bindings = <&kp EQUAL>, <&kp NUMBER_1>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        num_two: num_two {
            compatible = "zmk,behavior-mod-morph";
            label = "NUM_TWO";
            bindings = <&kp LEFT_PARENTHESIS>, <&kp NUMBER_2>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        num_three: num_three {
            compatible = "zmk,behavior-mod-morph";
            label = "NUM_THREE";
            bindings = <&kp LEFT_BRACE>, <&kp NUMBER_3>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        num_five: num_five {
            compatible = "zmk,behavior-mod-morph";
            label = "NUM_FIVE";
            bindings = <&kp LEFT_BRACKET>, <&kp N5>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        num_four: num_four {
            compatible = "zmk,behavior-mod-morph";
            label = "NUM_FOUR";
            bindings = <&kp RIGHT_BRACE>, <&kp NUMBER_4>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        num_zero: num_zero {
            compatible = "zmk,behavior-mod-morph";
            label = "NUM_ZERO";
            bindings = <&kp STAR>, <&kp N0>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        num_six: num_six {
            compatible = "zmk,behavior-mod-morph";
            label = "NUM_SIX";
            bindings = <&kp SLASH>, <&kp NUMBER_6>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        num_seven: num_seven {
            compatible = "zmk,behavior-mod-morph";
            label = "NUM_SEVEN";
            bindings = <&kp RIGHT_PARENTHESIS>, <&kp N7>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        num_eight: num_eight {
            compatible = "zmk,behavior-mod-morph";
            label = "NUM_EIGHT";
            bindings = <&kp RIGHT_BRACKET>, <&kp N8>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        num_nine: num_nine {
            compatible = "zmk,behavior-mod-morph";
            label = "NUM_NINE";
            bindings = <&kp EXCLAMATION>, <&kp N9>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        carat: carat {
            compatible = "zmk,behavior-mod-morph";
            label = "CARAT";
            bindings = <&kp CARET>, <&kp AT>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        comma: comma {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMA";
            bindings = <&kp COMMA>, <&kp LESS_THAN>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        exclamation: exclamation {
            compatible = "zmk,behavior-mod-morph";
            label = "EXCLAMATION";
            bindings = <&kp EXCL>, <&kp GREATER_THAN>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        tilde: tilde {
            compatible = "zmk,behavior-mod-morph";
            label = "TILDE";
            bindings = <&kp TILDE>, <&kp DOLLAR>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        percent: percent {
            compatible = "zmk,behavior-mod-morph";
            label = "PERCENT";
            bindings = <&kp PERCENT>, <&kp AMPS>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        hash: hash {
            compatible = "zmk,behavior-mod-morph";
            label = "HASH";
            bindings = <&kp HASH>, <&kp GRAVE>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        underscore: underscore {
            compatible = "zmk,behavior-mod-morph";
            label = "UNDERSCORE";
            bindings = <&kp UNDER>, <&kp PIPE>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        dash: dash {
            compatible = "zmk,behavior-mod-morph";
            label = "DASH";
            bindings = <&kp KP_SUBTRACT>, <&kp SLASH>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        quotes: quotes {
            compatible = "zmk,behavior-mod-morph";
            label = "QUOTES";
            bindings = <&kp DOUBLE_QUOTES>, <&kp SINGLE_QUOTE>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        dot: dot {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT";
            bindings = <&kp PERIOD>, <&kp PERIOD>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    macros {
        pas3: pas3 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp N1 &kp Q &kp A &kp Z &kp N2 &kp W &kp S &kp X &kp EXCL &kp LS(Q) &kp LS(A) &kp LS(Z) &kp AT &kp LS(W) &kp LS(S) &kp LS(X)>;
            label = "PAS3";
        };

        org: org {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp POUND &kp PLUS>;
            label = "ORG";
        };

        Nextsen: Nextsen {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp PERIOD &kp SPACE &sk LEFT_SHIFT>;
            label = "NEXTSEN";
        };

        nextcomma: nextcomma {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp COMMA &kp SPACE>;
            label = "NEXTCOMMA";
        };

        shell_back: shell_back {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp DOT &kp DOT &kp FSLH>;
            label = "SHELL_BACK";
        };
    };

    combos { compatible = "zmk,combos"; };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&tilde       &num_five        &num_four          &num_three    &num_two      &num_one  &carat                                                                                                     &hash                  &num_zero  &num_six      &num_seven    &num_eight    &num_nine     &percent
&underscore  &kp V            &kp M              &kp L         &kp C         &kp P     &kp LS(LA(LC(LG(C))))                                                                                      &kp LS(LG(LA(LC(X))))  &kp B      &kp F         &kp O         &kp U         &kp Q         &kp SEMI
&quotes      &Hml LEFT_ALT S  &Hml LEFT_SHIFT T  &Hml LMETA R  &Hml LCTRL D  &kp Y     &kp LS(LA(LC(LG(W))))  &kp TAB    &kp ESCAPE                 &none                  &kp LS(LA(LC(LG(A))))  &kp LS(LC(LG(LA(F))))  &dot       &Hmr RCTRL N  &Hmr RMETA E  &Hmr RSHFT A  &Hmr RALT I   &dash
&kp PLUS     &kp Z            &kp K              &kp J         &kp G         &kp W                                       &kp LS(LC(LG(LA(D))))      &kp LS(LG(LA(LC(B))))                                                &kp X      &kp H         &comma        &exclamation  &kp QUESTION  &kp BACKSLASH
&kp F5       &kp F4           &kp F3             &kp F2        &kp F1                  &Spc 1 SPACE           &kp ENTER  &to 2                      &out OUT_TOG           &Caps                  &kp BACKSPACE                     &kp F6        &kp F7        &kp F8        &kp F9        &kp F10
            >;
        };

        layer_extend {
            bindings = <
&bootloader  &none         &none      &bt BT_CLR    &bt BT_PRV     &bt BT_NXT  &none                                  &none      &none           &none      &none         &none      &none          &bootloader
&none        &none         &none      &kp K_BACK    &kp K_FORWARD  &none       &none                                  &none      &kp HOME        &kp PG_DN  &kp PG_UP     &kp END    &none          &none
&none        &kp LEFT_ALT  &kp LSHFT  &kp LEFT_GUI  &kp LCTRL      &none       &none  &none  &none      &none  &none  &none      &kp LEFT_ARROW  &kp DOWN   &kp UP_ARROW  &kp RIGHT  &kp BACKSPACE  &none
&none        &none         &none      &none         &none          &none                     &none      &none                    &none           &none      &none         &none      &none          &none
&none        &none         &none      &none         &none                      &none  &none  &none      &none  &none  &kp ENTER                  &pas3      &none         &none      &none          &none
            >;
        };

        layer_qwerty {
            bindings = <
&none             &kp N5            &kp N4  &kp N3  &kp N2  &kp N1  &none                                                                                         &none          &kp N0  &kp N6  &kp N7  &kp N8     &kp N9     &kp MINUS
&kp SINGLE_QUOTE  &none             &kp Q   &kp W   &kp E   &kp R   &none                                                                                         &none          &kp T   &kp Y   &kp U   &kp I      &kp O      &kp P
&kp LEFT_CONTROL  &kp LEFT_CONTROL  &kp A   &kp S   &kp D   &kp F   &none     &kp TAB    &kp ESCAPE                 &caps_word             &kp LA(LC(LG(LS(A))))  &trans         &kp G   &kp H   &kp J   &kp K      &kp L      &kp RIGHT_META
&kp LSHFT         &kp LCMD          &kp Z   &kp X   &kp C   &kp V                        &kp LS(LG(LC(LA(D))))      &kp LS(LA(LC(LG(B))))                                        &kp B   &kp N   &kp M   &kp COMMA  &kp COMMA  &kp RSHFT
&trans            &trans            &trans  &trans  &trans          &kp BSPC  &kp ENTER  &to 0                      &trans                 &Caps                  &kp BACKSPACE          &trans  &trans  &trans     &trans     &trans
            >;
        };
    };
};
