/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */
/* THIS FILE WAS GENERATED!
 *
 * This file was generated automatically. You may or may not want to
 * edit it directly.
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

/ {
    behaviors {
        #include "macros.dtsi"
    #include "version.dtsi"

        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <175>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            label = "HML";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <175>;
            hold-trigger-key-positions = <7 8 9 10 11 12 13 21 22 23 24 25 26 27 38 39 40 41 42 43 44 45 54 55 56 57 58 59 69 70 71 72 73 74 75 37 38 53 68 69>;
            hold-trigger-on-release;
        };

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <175>;
            flavor = "balanced";
            hold-trigger-key-positions = <0 1 2 3 4 5 6 14 15 16 17 18 19 20 28 29 30 31 32 33 34 35 36 46 47 48 49 50 51 52 60 61 62 63 64 65 66 67>;
            hold-trigger-on-release;
        };

        Exclm: Exclm {
            compatible = "zmk,behavior-mod-morph";
            label = "EXCLM";
            bindings = <&kp EXCL>, <&kp QUESTION>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };
    };

    macros {
        pass: pass {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp N1 &kp Q &kp A &kp Z &kp N2 &kp W &kp R &kp X &kp EXCL &kp LS(Q) &kp LS(A) &kp LS(Z) &kp AT &kp LS(W) &kp LS(R) &kp LS(X)>;
            label = "PASS";
        };

        pas2: pas2 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp LS(C) &kp Y &kp B &kp E &kp R &kp LS(W) &kp A &kp R &kp R &kp I &kp O &kp R &kp S &kp N1 &kp N2 &kp N3 &kp EXCL &kp AT &kp POUND>;
            label = "PAS2";
        };

        pas3: pas3 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp N1 &kp Q &kp A &kp Z &kp N2 &kp W &kp S &kp X &kp EXCL &kp LS(Q) &kp LS(A) &kp LS(Z) &kp AT &kp LS(W) &kp LS(S) &kp LS(X)>;
            label = "PAS3";
        };

        org: org {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp PERIOD>;
            label = "ORG";
        };

        Nextsen: Nextsen {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp PERIOD &kp SPACE &kp LSHFT>;
            label = "NEXTSEN";
        };
    };

    combos {
        compatible = "zmk,combos";

        escape {
            bindings = <&kp ESCAPE>;
            key-positions = <17 18>;
            require-prior-idle-ms = <175>;
            layers = <0>;
        };

        Repeat {
            bindings = <&key_repeat>;
            key-positions = <31 32>;
            require-prior-idle-ms = <175>;
            layers = <0>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&none     &kp F5           &kp F4             &kp F3            &kp F2        &kp F1  &none                                                                                &kp LC(LA(DELETE))  &kp F6   &kp F7                &kp F8            &kp F9              &kp F10           &none
&none     &kp V            &kp M              &kp L             &kp C         &kp P   &kp C_AL_WWW                                                                         &none               &kp B    &kp F                 &kp O             &kp U               &kp Q             &none
&Nextsen  &hml LEFT_ALT S  &hml LEFT_SHIFT T  &hml LEFT_META R  &hml LCTRL D  &kp Y   &none         &kp LS(LA(LC(LG(A))))  &none      &out OUT_TOG  &kp LS(LA(LC(LG(B))))  &none               &kp DOT  &hmr RIGHT_CONTROL N  &hmr LEFT_META E  &hmr RIGHT_SHIFT A  &hmr RIGHT_ALT I  &kp MINUS
&none     &kp Z            &kp K              &kp J             &kp G         &kp W                                        &none      &bl BL_TOG                                               &kp X    &kp H                 &kp COMMA         &Exclm              &kp SINGLE_QUOTE  &none
&none     &org             &none              &kp STAR          &kp COLON             &lt 1 SPACE   &sk LEFT_SHIFT         &none      &none         &key_repeat            &lt 2 BACKSPACE              &kp DOUBLE_QUOTES     &kp SEMI          &none               &none             &none
            >;
        };

        layer_extend {
            bindings = <
&bootloader  &none         &none       &none         &kp F2           &kp F1  &trans                                    &none      &none           &none              &none       &none           &none            &bootloader
&none        &none         &kp K_MUTE  &kp C_VOL_DN  &kp C_VOLUME_UP  &none   &none                                     &none      &kp HOME        &kp PG_DN          &kp PG_UP   &kp END         &kp PAUSE_BREAK  &none
&none        &kp LEFT_ALT  &kp LSHFT   &kp LEFT_GUI  &kp LCTRL        &none   &none   &none  &none      &none  &none    &none      &kp LEFT_ARROW  &kp DOWN           &kp UP      &kp RIGHT       &kp BACKSPACE    &none
&none        &none         &none       &kp C_PREV    &kp C_NEXT       &none                  &none      &none                      &none           &kp K_APPLICATION  &kp INSERT  &kp SCROLLLOCK  &kp PRINTSCREEN  &none
&none        &none         &none       &none         &none                    &none   &none  &none      &none  &kp TAB  &kp ENTER                  &pass              &pas2       &pas3           &none            &none
            >;
        };

        layer_SYMBOL {
            bindings = <
&trans  &trans     &trans      &trans                 &trans                &trans         &trans                                                &trans  &trans  &trans        &trans        &trans        &trans  &trans
&trans  &kp AT     &kp DOLLAR  &kp RIGHT_BRACE        &kp LEFT_BRACE        &kp PIPE       &trans                                                &trans  &none   &kp N7        &kp N8        &kp N9        &none   &trans
&trans  &kp TILDE  &kp SLASH   &kp RIGHT_PARENTHESIS  &kp LEFT_PARENTHESIS  &none          &trans     &trans         &trans      &trans  &trans  &trans  &kp N0  &kp NUMBER_4  &kp N5        &kp NUMBER_6  &none   &trans
&trans  &kp GRAVE  &kp PLUS    &kp RIGHT_BRACKET      &kp LEFT_BRACKET      &kp BACKSLASH                            &trans      &trans                  &none   &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &none   &trans
&trans  &trans     &trans      &trans                 &trans                               &kp LCTRL  &kp LEFT_META  &trans      &trans  &trans  &trans          &trans        &trans        &trans        &trans  &trans
            >;
        };
    };
};
